import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
/**
 * Describes the file apple.proto.
 */
export declare const file_apple: GenFile;
/**
 * @generated from message apple.WifiDevice
 */
export type WifiDevice = Message<"apple.WifiDevice"> & {
    /**
     * @generated from field: string bssid = 1;
     */
    bssid: string;
    /**
     * @generated from field: optional apple.Location location = 2;
     */
    location?: Location;
};
/**
 * Describes the message apple.WifiDevice.
 * Use `create(WifiDeviceSchema)` to create a new message.
 */
export declare const WifiDeviceSchema: GenMessage<WifiDevice>;
/**
 * @generated from message apple.DeviceType
 */
export type DeviceType = Message<"apple.DeviceType"> & {
    /**
     * @generated from field: string operating_system = 1;
     */
    operatingSystem: string;
    /**
     * @generated from field: string model = 2;
     */
    model: string;
};
/**
 * Describes the message apple.DeviceType.
 * Use `create(DeviceTypeSchema)` to create a new message.
 */
export declare const DeviceTypeSchema: GenMessage<DeviceType>;
/**
 * @generated from message apple.AppleWLoc
 */
export type AppleWLoc = Message<"apple.AppleWLoc"> & {
    /**
     * optional int64 unknown_value0 = 1;
     *
     * @generated from field: repeated apple.WifiDevice wifi_devices = 2;
     */
    wifiDevices: WifiDevice[];
    /**
     * @generated from field: optional sint32 num_cell_results = 3;
     */
    numCellResults?: number;
    /**
     * Set to -1 to disable
     *
     * @generated from field: optional sint32 num_wifi_results = 4;
     */
    numWifiResults?: number;
    /**
     * @generated from field: optional string app_bundle_id = 5;
     */
    appBundleId?: string;
    /**
     * optional string unknown_value2 = 6;
     * optional int64 unknown_value7 = 7;
     *
     * LTE cell towers
     *
     * @generated from field: repeated apple.CellTower cell_tower_response = 22;
     */
    cellTowerResponse: CellTower[];
    /**
     * @generated from field: optional apple.CellTower cell_tower_request = 25;
     */
    cellTowerRequest?: CellTower;
    /**
     * optional int32 unknown_value31 = 31;
     * optional int32 unknown_value32 = 32;
     *
     * @generated from field: optional apple.DeviceType device_type = 33;
     */
    deviceType?: DeviceType;
};
/**
 * Describes the message apple.AppleWLoc.
 * Use `create(AppleWLocSchema)` to create a new message.
 */
export declare const AppleWLocSchema: GenMessage<AppleWLoc>;
/**
 * @generated from message apple.CellTower
 */
export type CellTower = Message<"apple.CellTower"> & {
    /**
     * Typo for MCC
     *
     * @generated from field: uint32 mmc = 1;
     */
    mmc: number;
    /**
     * @generated from field: uint32 mnc = 2;
     */
    mnc: number;
    /**
     * Full GID
     *
     * @generated from field: uint32 cell_id = 3;
     */
    cellId: number;
    /**
     * @generated from field: uint32 tac_id = 4;
     */
    tacId: number;
    /**
     * @generated from field: optional apple.Location location = 5;
     */
    location?: Location;
    /**
     * @generated from field: optional uint32 uarfcn = 6;
     */
    uarfcn?: number;
    /**
     * @generated from field: optional uint32 pid = 7;
     */
    pid?: number;
};
/**
 * Describes the message apple.CellTower.
 * Use `create(CellTowerSchema)` to create a new message.
 */
export declare const CellTowerSchema: GenMessage<CellTower>;
/**
 * @generated from message apple.Location
 */
export type Location = Message<"apple.Location"> & {
    /**
     * @generated from field: optional int64 latitude = 1;
     */
    latitude?: bigint;
    /**
     * @generated from field: optional int64 longitude = 2;
     */
    longitude?: bigint;
    /**
     * @generated from field: optional int64 horizontal_accuracy = 3;
     */
    horizontalAccuracy?: bigint;
    /**
     * @generated from field: optional int64 unknown_value4 = 4;
     */
    unknownValue4?: bigint;
    /**
     * @generated from field: optional int64 altitude = 5;
     */
    altitude?: bigint;
    /**
     * @generated from field: optional int64 vertical_accuracy = 6;
     */
    verticalAccuracy?: bigint;
    /**
     * @generated from field: optional int64 speed = 7;
     */
    speed?: bigint;
    /**
     * @generated from field: optional int64 course = 8;
     */
    course?: bigint;
    /**
     * @generated from field: optional int64 timestamp = 9;
     */
    timestamp?: bigint;
    /**
     * Unused
     *
     * @generated from field: optional int64 unknown_context = 10;
     */
    unknownContext?: bigint;
    /**
     * @generated from field: optional int64 motion_activity_type = 11;
     */
    motionActivityType?: bigint;
    /**
     * @generated from field: optional int64 motion_activity_confidence = 12;
     */
    motionActivityConfidence?: bigint;
    /**
     * Unused from this point on (in responses)
     *
     * @generated from field: optional int64 provider = 13;
     */
    provider?: bigint;
    /**
     * @generated from field: optional int64 floor = 14;
     */
    floor?: bigint;
    /**
     * @generated from field: optional int64 unknown15 = 15;
     */
    unknown15?: bigint;
    /**
     * @generated from field: optional int64 motion_vehicle_connected_state_changed = 16;
     */
    motionVehicleConnectedStateChanged?: bigint;
    /**
     * @generated from field: optional int64 motion_vehicle_connected = 17;
     */
    motionVehicleConnected?: bigint;
    /**
     * @generated from field: optional int64 raw_motion_activity = 18;
     */
    rawMotionActivity?: bigint;
    /**
     * @generated from field: optional int64 motion_activity = 19;
     */
    motionActivity?: bigint;
    /**
     * @generated from field: optional int64 dominant_motion_activity = 20;
     */
    dominantMotionActivity?: bigint;
    /**
     * @generated from field: optional int64 course_accuracy = 21;
     */
    courseAccuracy?: bigint;
    /**
     * @generated from field: optional int64 speed_accuracy = 22;
     */
    speedAccuracy?: bigint;
    /**
     * @generated from field: optional int64 mode_indicator = 23;
     */
    modeIndicator?: bigint;
    /**
     * > The first two parameters describe how large and how squished the ellipse is, and the third parameter will be the Azimuth - the rotation of the ellipse. The center of the ellipse is the location lat/long.
     * > https://qgis.org/pyqgis/3.28/core/QgsEllipse.html, https://en.wikipedia.org/wiki/Semi-major_and_semi-minor_axes, https://en.wikipedia.org/wiki/Kepler%27s_equation, https://en.wikipedia.org/wiki/Dilution_of_precision_(navigation), https://www.youtube.com/watch?v=aPLTirCbB5A&list=PLGvhNIiu1ubyEOJga50LJMzVXtbUq6CPo&index=16&t=707s
     * > - Credits to Luke who sent me these details via email. I don't have a base in math so it'll take a while to fully understand.
     * Used to calculate horizontal/vertical accuracy in tracking reports sent to Apple (calculations done on their servers)
     *
     * @generated from field: optional int64 horzUncSemiMaj = 24;
     */
    horzUncSemiMaj?: bigint;
    /**
     * @generated from field: optional int64 horzUncSemiMin = 25;
     */
    horzUncSemiMin?: bigint;
    /**
     * @generated from field: optional int64 horzUncSemiMajAz = 26;
     */
    horzUncSemiMajAz?: bigint;
    /**
     * Not actually an int64. Unknown data type
     *
     * @generated from field: optional int64 satellite_report = 27;
     */
    satelliteReport?: bigint;
    /**
     * @generated from field: optional int64 is_from_location_controller = 28;
     */
    isFromLocationController?: bigint;
    /**
     * @generated from field: optional int64 pipeline_diagnostic_report = 29;
     */
    pipelineDiagnosticReport?: bigint;
    /**
     * @generated from field: optional int64 baro_calibration_indication = 30;
     */
    baroCalibrationIndication?: bigint;
    /**
     * Unknown data type
     *
     * @generated from field: optional int64 processing_metadata = 31;
     */
    processingMetadata?: bigint;
};
/**
 * Describes the message apple.Location.
 * Use `create(LocationSchema)` to create a new message.
 */
export declare const LocationSchema: GenMessage<Location>;
