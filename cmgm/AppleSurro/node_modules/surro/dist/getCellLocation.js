"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getCellLocation;
const queryCell_1 = __importDefault(require("./queryCell"));
const coordFromBigInt_1 = __importDefault(require("./util/coordFromBigInt"));
async function getCellLocation(mcc, mnc, cid, lac) {
    try {
        // Get result from API
        const result = await (0, queryCell_1.default)(mcc, mnc, cid, lac);
        if (result.length === 0) {
            throw new Error('No data found');
        }
        const polyResponse = result[0];
        // Ensure that location is valid integer
        if (!polyResponse.location?.latitude || !polyResponse.location?.longitude) {
            throw new Error('Invalid location data');
        }
        // Ensure that location is valid location
        if ((0, coordFromBigInt_1.default)(polyResponse?.location?.latitude) == -180 ||
            (0, coordFromBigInt_1.default)(polyResponse?.location?.longitude) == -180) {
            throw new Error('Invalid location coordinates');
        }
        // Ensure that cell is valid (filter junk data)
        const MAX_INT = Math.pow(2, 32) - 1;
        if (polyResponse.cellId >= MAX_INT) {
            throw new Error('Invalid cell ID');
        }
        // Set extra parameters on response
        const latitude = (0, coordFromBigInt_1.default)(polyResponse.location.latitude);
        const longitude = (0, coordFromBigInt_1.default)(polyResponse.location.longitude);
        const accuracy = Number(polyResponse.location.horizontalAccuracy);
        const response = {
            lat: latitude,
            lon: longitude,
            range: accuracy,
        };
        return { success: true, data: response };
    }
    catch (error) {
        return { success: false, error: error };
    }
}
