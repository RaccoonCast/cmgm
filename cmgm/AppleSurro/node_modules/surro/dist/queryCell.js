"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = queryCell;
const protobuf_1 = require("@bufbuild/protobuf");
const apple_pb_1 = require("./gen/apple_pb");
const constants_1 = require("./constants");
/**
 * @internal
 * @param mcc
 * @param mnc
 * @param cid
 * @param lac
 * @returns
 */
async function queryCell(mcc, mnc, cid, lac) {
    const cellToPass = (0, protobuf_1.create)(apple_pb_1.CellTowerSchema, {
        mmc: mcc,
        mnc: mnc,
        cellId: cid,
        tacId: lac,
    });
    // Generate protobuf request body
    const requestBody = (0, protobuf_1.create)(apple_pb_1.AppleWLocSchema, {
        numCellResults: 10000000,
        cellTowerRequest: cellToPass,
        deviceType: {
            operatingSystem: constants_1.device.operatingSystem,
            model: constants_1.device.deviceModel,
        },
    });
    // Generate binary request payload
    const protoPayload = (0, protobuf_1.toBinary)(apple_pb_1.AppleWLocSchema, requestBody);
    // Add headers
    const headerData = [
        new Uint8Array([0x00, 0x01, 0x00, 0x05]),
        new TextEncoder().encode('en_US'),
        new Uint8Array([0x00, 0x13]),
        new TextEncoder().encode('com.apple.locationd'),
        new Uint8Array([0x00, 0x0a]),
        new TextEncoder().encode('17.5.21F79'),
        new Uint8Array([0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00]),
        new Uint8Array([protoPayload.length]), // length of serializedWloc
    ];
    // Concatenate all header parts
    const header = concatenateUint8Arrays(...headerData);
    // Append serializedWloc to the header
    const requestPayload = concatenateUint8Arrays(header, protoPayload);
    // Set headers to send with HTTP request
    const requestHeaders = {
        'Content-Type': 'application/x-www-form-urlencoded', // Should be protobuf, but this is what was used in previous implementations
        Accept: '*/*',
        'Accept-Charset': 'utf-8',
        // "Accept-Encoding": "gzip, deflate",
        'Accept-Language': 'en-us',
        'User-Agent': 'locationd/1753.17 CFNetwork/711.1.12 Darwin/14.0.0',
        'Rand-Id': 'true',
    };
    const req = await fetch(constants_1.apple_api_url, {
        method: 'POST',
        body: requestPayload,
        headers: requestHeaders,
    });
    // Error handling for request failure
    if (!req.ok) {
        throw new Error('HTTP Request Failed');
    }
    // Get response as ArrayBuffer
    const res = await req.arrayBuffer();
    // Slice the first 10 (header) off of response, presumably it's a header of some kind?
    // https://github.com/acheong08/apple-corelocation-experiments/blob/33e543/lib/wloc.go#L72
    const resultAsByteArray = new Uint8Array(res).slice(10);
    // Decode response object using proto schema
    const decodedResponseObject = (0, protobuf_1.fromBinary)(apple_pb_1.AppleWLocSchema, resultAsByteArray);
    const ctr = decodedResponseObject?.cellTowerResponse;
    // TODO: If lat/lng are (-180, -180) for the site, it wasn't able to be found
    // Not sure whether that error should be handled / thrown here, or if
    // the full unmodified response should be passed to the client
    // Maybe best practice would be to handle in getCellLocation / getSurroundingCells?
    // if cid = '4294967295' (max uint32) the request is also bad
    // I think the best course of action is to throw the errors here, and catch them elsewhere
    // Use union types elsewhere to respond to calls (no one should call queryCell directly)
    // Return raw response
    return ctr;
}
// Function to concatenate multiple Uint8Arrays
function concatenateUint8Arrays(...arrays) {
    // Calculate the total length of the new Uint8Array
    const totalLength = arrays.reduce((sum, arr) => sum + arr.length, 0);
    // Create a new Uint8Array with the total length
    const result = new Uint8Array(totalLength);
    // Copy each array into the result
    let offset = 0;
    arrays.forEach((arr) => {
        result.set(arr, offset);
        offset += arr.length;
    });
    return result;
}
