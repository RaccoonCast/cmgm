"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getSurroundingCells;
const queryCell_1 = __importDefault(require("./queryCell"));
const coordFromBigInt_1 = __importDefault(require("./util/coordFromBigInt"));
async function getSurroundingCells(mcc, mnc, cid, lac) {
    try {
        // Get result from API
        const result = await (0, queryCell_1.default)(mcc, mnc, cid, lac);
        // Setup response
        const responseBuilder = [];
        // Loop through each item
        for (const polyResponse of result) {
            // Ensure that location is valid integer
            if (!polyResponse.location?.latitude ||
                !polyResponse.location?.longitude) {
                // skip to next iteration
                continue;
            }
            // Ensure that location is valid location
            if ((0, coordFromBigInt_1.default)(polyResponse?.location?.latitude) == -180 ||
                (0, coordFromBigInt_1.default)(polyResponse?.location?.longitude) == -180) {
                continue;
            }
            // Ensure that cell is valid (filter junk data)
            const MAX_INT = Math.pow(2, 32) - 1;
            if (polyResponse.cellId >= MAX_INT) {
                continue;
            }
            // Set extra parameters on response
            const enbId = Math.trunc(polyResponse.cellId / 256);
            const latitude = (0, coordFromBigInt_1.default)(polyResponse.location.latitude);
            const longitude = (0, coordFromBigInt_1.default)(polyResponse.location.longitude);
            const accuracy = Number(polyResponse.location.horizontalAccuracy);
            const customParams = {
                eNB: enbId,
                latitude: latitude,
                longitude: longitude,
                accuracy: accuracy,
            };
            // Combine the two types into response
            const response = { ...polyResponse, ...customParams };
            responseBuilder.push(response);
        }
        if (responseBuilder.length == 0) {
            throw new Error('No results found!');
        }
        return { success: true, data: responseBuilder };
    }
    catch (error) {
        return { success: false, error: error };
    }
}
